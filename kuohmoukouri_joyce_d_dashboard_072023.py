# -*- coding: utf-8 -*-
"""KuohMoukouri_Joyce_D_dashboard_072023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bm7_Cc5bvhOfJ__PfoOpmdxRBr7uoKYX

# Projet 7 : Implémentez un modèle de scoring

## NB D : Dashboard

- <a href="#C1"> 1. Importation des données</a>

- <a href="#C2"> 2. Préparation du dataset </a>

- <a href="#C3"> 3. Intégration du modèle </a>

- <a href="#C4"> 4. Dashboard </a>
  -  <a href="#C41"> 4.1 Dashboard layout <a>
  -  <a href="#C42"> 4.2 Visualisation <a>
  -  <a href="#C43"> 4.3 Intéractivité <a>
  -  <a href="#C44"> 4.4 Outils d'interprétation <a>
"""

import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import re
import seaborn as sns
import missingno as msno
import clean #mon module de fontions qui me permettent de nettoyer un dataframe
import plot_
import joblib
import os
import MyModule_p7
import requests

#-------------------------Filter warnings-------------------------
import warnings
warnings.filterwarnings('ignore')
! pip install dash --quiet
! pip install category_encoders --quiet
! pip install shap --quiet
! pip install flask

#---------------------------- Dash ------------------------------
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px
import shap

!pip freeze > requirements.txt

"""# <a name="C1"> 1. Chargement du preproccesing et du modèle de classification </a>"""

from flask import Flask, request, jsonify
df_train_org = pd.read_csv('df_train_set_1.csv',
                 usecols=['SECTEUR_ACTIVITE'])

freq_by_org_type = df_train_org['SECTEUR_ACTIVITE'].value_counts(normalize=True).to_dict()

def frequency_encode(x):
    return x.replace(freq_by_org_type)

loaded_preprocess = MyModule_p7.preprocess_model()

classification_model = joblib.load('LightGBM_bestmodel.pkl')

"""# <a name="C2"> 2. Création des fonctions pour l'API </a>"""

def feat_local(df_client_pp):
  # J'instancie le Shap explainer -----------------------------------
  explainer = shap.Explainer(classification_model)

  # Calculate SHAP values for the client's prediction
  shap_values = explainer.shap_values(df_client_pp)
  ##-------- df_pp
  prefixes_to_remove = ['oneHot__', 'remainder__', 'frequency__']
  new_column_names = [col.replace(prefix, '') for col in df_client_pp.columns for prefix in prefixes_to_remove if col.startswith(prefix)]
  df_client_pp.columns = new_column_names
  return shap_values, df_client_pp

def prediction_credit():
    client_id = str(input("Entrer id_clients"))
    print(client_id)
    client_data = MyModule_p7.get_client_data(client_id)
    df_client_pp = loaded_preprocess.transform(client_data)
    prediction = classification_model.predict(df_client_pp)
    proba = classification_model.predict_proba(df_client_pp)
    score = int(round((1-proba[0][1])*100))
    SV, df_client_pp = feat_local(df_client_pp)
    return client_id, {'prediction': [prediction, proba]}, score, df_client_pp, SV

#test
prediction_credit()

"""# <a name="C3"> 3. Création de l'API </a>"""

app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    # Receive client ID from the request
    data = request.get_json()
    client_id = data.get('client_id')

    client_data = MyModule_p7.get_client_data(client_id)
    df_client_pp = loaded_preprocess.transform(client_data)

    # Get prediction, score, SHAP values, etc.
    result = prediction_credit(df_client_pp)

    # Return the results as a JSON response
    return jsonify({
        'client_id': result[0],
        'prediction': result[1][0],
        'proba': result[1][1],
        'score': result[2],
        'df_client_pp': result[3].to_dict(),  # Convert DataFrame to dictionary
        'shap_values': result[4].tolist()  # Convert SHAP values to list
    })


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)